plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.qili'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// 解决依赖冲突
configurations.all() {
    Configuration configuration ->
        //当遇到版本冲突时直接构建失败
        configuration.resolutionStrategy.failOnVersionConflict()
        //指定版本，避免冲突
        configuration.resolutionStrategy.force(['commons-io:commons-io:2.5'])
        configuration.resolutionStrategy.force(['commons-lang:commons-lang:2.6'])
        configuration.resolutionStrategy.force(['commons-logging:commons-logging:1.2'])
        configuration.resolutionStrategy.force(['org.apache.zookeeper:zookeeper:3.4.8'])
        configuration.resolutionStrategy.force(['org.jruby.jcodings:jcodings:1.0.55'])
        configuration.resolutionStrategy.force(['commons-collections:commons-collections:3.2.2'])
        configuration.resolutionStrategy.force(['com.google.code.findbugs:jsr305:3.0.2'])
        configuration.resolutionStrategy.force(['org.apache.commons:commons-compress:1.4.1'])
        configuration.resolutionStrategy.force(['org.codehaus.woodstox:org.codehaus.woodstox:4.2'])
        configuration.resolutionStrategy.force(['org.codehaus.woodstox:stax2-api:4.2'])
        configuration.resolutionStrategy.force(['com.google.guava:guava:16.0.1'])
        configuration.resolutionStrategy.force(['com.google.protobuf:protobuf-java:3.21.9'])
        configuration.resolutionStrategy.force(['org.xerial.snappy:snappy-java:1.1.8.4'])
        configuration.resolutionStrategy.force(['ch.qos.reload4j:reload4j:1.2.22'])
        configuration.resolutionStrategy.force(['org.slf4j:slf4j-api:2.0.7'])
}


repositories {
    mavenCentral()
    maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
}

ext {
    set('springCloudVersion', "2022.0.1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    //implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    //implementation 'org.springframework.boot:spring-boot-starter-amqp'
    //implementation 'org.springframework.cloud:spring-cloud-bus'
    //implementation 'org.springframework.cloud:spring-cloud-starter'
    //implementation 'org.springframework.cloud:spring-cloud-starter-config'
    //implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    //implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    //implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    //implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    //implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation ('org.apache.hbase:hbase-client:2.5.2'){
        exclude group: 'ch.qos.reload4j', module: 'reload4j'
    }
    implementation ('com.alibaba.fastjson2:fastjson2:2.0.20')
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

}

dependencyManagement {
//    imports {
//        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
//    }
}

tasks.named('test') {
    useJUnitPlatform()
}
