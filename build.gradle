plugins {
    id 'org.springframework.boot' version '2.2.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

group = 'com.qili'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
// 解决依赖冲突
//configurations.all() {
//    Configuration configuration ->
//        //当遇到版本冲突时直接构建失败
//        configuration.resolutionStrategy.failOnVersionConflict()
//        //指定版本，避免冲突
//        configuration.resolutionStrategy.force(['commons-io:commons-io:2.5'])
//        configuration.resolutionStrategy.force(['commons-lang:commons-lang:2.6'])
//        configuration.resolutionStrategy.force(['commons-logging:commons-logging:1.2'])
//        configuration.resolutionStrategy.force(['org.apache.zookeeper:zookeeper:3.4.8'])
//        configuration.resolutionStrategy.force(['org.jruby.jcodings:jcodings:1.0.55'])
//        configuration.resolutionStrategy.force(['commons-collections:commons-collections:3.2.2'])
//        configuration.resolutionStrategy.force(['com.google.code.findbugs:jsr305:3.0.2'])
//        configuration.resolutionStrategy.force(['org.apache.commons:commons-compress:1.4.1'])
//        configuration.resolutionStrategy.force(['org.codehaus.woodstox:org.codehaus.woodstox:4.2'])
//        configuration.resolutionStrategy.force(['org.codehaus.woodstox:stax2-api:4.2'])
//        configuration.resolutionStrategy.force(['com.google.guava:guava:16.0.1'])
//        configuration.resolutionStrategy.force(['com.google.protobuf:protobuf-java:3.21.9'])
//        configuration.resolutionStrategy.force(['org.xerial.snappy:snappy-java:1.1.8.4'])
//        configuration.resolutionStrategy.force(['ch.qos.reload4j:reload4j:1.2.22'])
//        configuration.resolutionStrategy.force(['org.slf4j:slf4j-api:2.0.7'])
//        configuration.resolutionStrategy.force(['org.apache.curator:curator-client:5.1.0'])
//        configuration.resolutionStrategy.force(['jakarta.inject:jakarta.inject-api:2.0.1'])
//        configuration.resolutionStrategy.force(['commons-configuration:commons-configuration:1.10'])
//        configuration.resolutionStrategy.force(['org.apache.curator:curator-client:5.1.0'])
//        configuration.resolutionStrategy.force(['com.fasterxml.woodstox:woodstox-core:6.5.0'])
//        configuration.resolutionStrategy.force(['com.netflix.servo:servo-core:6.5.0'])
//        configuration.resolutionStrategy.force(['com.google.errorprone:error_prone_annotations:2.3.4'])
//        configuration.resolutionStrategy.force(['io.reactivex:rxjava:1.3.8'])
//}


repositories {
    maven { url = "https://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
    mavenCentral()
}

ext {
    set('springCloudVersion', "Hoxton.SR4")
    set('springCloudAlibabaVersion', "2.2.2.RELEASE")
}

ext['log4j2.version'] = '2.17.0'

dependencies {

    // 配置中心+注册中心
    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'
    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'


    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.security:spring-security-core:5.5.0'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
    implementation 'org.springframework.cloud:spring-cloud-function-core:3.2.3'
    implementation 'com.alibaba:druid-spring-boot-starter:1.2.6'
    implementation 'com.alibaba:easyexcel:2.1.6'
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.16'

    implementation 'com.alibaba:fastjson:1.2.83'


    implementation 'com.aliyun.oss:aliyun-sdk-oss:2.8.3'
    implementation 'com.alicp.jetcache:jetcache-starter-redis-lettuce:2.7.0'
    implementation 'com.esotericsoftware:reflectasm:1.11.9'
    implementation 'net.logstash.logback:logstash-logback-encoder:5.2'
    implementation 'net.lingala.zip4j:zip4j:2.9.1'
    implementation 'io.github.openfeign:feign-okhttp'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'io.swagger:swagger-models:1.5.22'

    implementation 'org.springframework.kafka:spring-kafka'
    implementation ('org.apache.hbase:hbase-client:2.5.2'){
        exclude group: 'ch.qos.reload4j', module: 'reload4j'
    }
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    runtimeOnly 'mysql:mysql-connector-java'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
